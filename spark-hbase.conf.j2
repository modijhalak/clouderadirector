
name: "{{ lookup('ini', 'app_name section=clouderam file=cloudera.ini') }}"
provider {
    type: "{{ lookup('ini', 'cm_type section=clouderam file=cloudera.ini') }}"
    region: "{{ lookup('ini', 'cm_region section=clouderam file=cloudera.ini') }}"
    subnetId: "{{ lookup('ini', 'cm_subnet section=clouderam file=cloudera.ini') }}"
    securityGroupsIds: "{{ lookup('ini', 'cm_sg section=clouderam file=cloudera.ini') }}"
    instanceNamePrefix: "{{ lookup('ini', 'app_name section=clouderam file=cloudera.ini') }}"
    associatePublicIpAddresses: "{{ lookup('ini', 'cm_public_ip section=clouderam file=cloudera.ini') }}"
    rootVolumeSizeGB: "{{ lookup('ini', 'ec2_ebs_size section=clouderam file=cloudera.ini') }}"
}
ssh {
    username: "{{ lookup('ini', 'ec2_user section=clouderam file=cloudera.ini') }}"
    privateKey: "{{ lookup('ini', 'ec2_key section=clouderam file=cloudera.ini') }}"
}
common-instance-properties {
    image: "{{ lookup('ini', 'ec2_ami section=clouderam file=cloudera.ini') }}" #"ami-0187fa62" # old ami-1c19817f
    iamProfileName: "{{ lookup('ini', 'ec2_iam section=clouderam file=cloudera.ini') }}"
    tags {
        App-code: "ADA"
    }
    normalizeInstance: "true"
}
instances {

    c42x: ${common-instance-properties} {
        type: "c4.2xlarge"
        bootstrapScriptPath: "/tmp/bootstrap-script.sh"
    }
    c44x: ${common-instance-properties} {
        type: "c4.4xlarge"
        bootstrapScriptPath: "/tmp/bootstrap-script.sh"
    }
    c48x: ${common-instance-properties} {
        type: "c4.8xlarge"
        bootstrapScriptPath: "/tmp/bootstrap-script.sh"
    }
    t2l : ${common-instance-properties} {   # only suitable as a gateway
        type: "t2.large"
        bootstrapScriptPath: "/tmp/bootstrap-script.sh"
    }
}
databaseServers {
    existingmysql1 {
        type: mysql
        host: "{{ lookup('ini', 'cm_db_host' section=clouderam file=cloudera.ini') }}"
        port: 3306
        user: "{{ lookup('ini', 'cm_db_user section=clouderam file=cloudera.ini') }}"
        password: "{{ lookup('ini', 'cm_db_passwd section=clouderam file=cloudera.ini') }}"
    }
}
cloudera-manager {
    instance: ${instances.m44x} {
        tags {
            application: "{{ lookup('ini', 'app_name section=clouderam file=cloudera.ini') }}"
        }
    }
    javaInstallationStrategy: NONE
    enableEnterpriseTrial: "true"
    csds: [
       "http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.2.0.cloudera1.jar"
    ]
    configs {
        CLOUDERA_MANAGER {
             enable_api_debug: true
             custom_banner_html: "{{ lookup('ini', 'app_name section=clouderam file=cloudera.ini') }}"
       }
       SERVICEMONITOR {
             firehose_non_java_memory_bytes: 4500000000
       }
       HOSTMONITOR {
             firehose_non_java_memory_bytes: 4500000000
       }
    }
    databases {
         CLOUDERA_MANAGER {
             type: "mysql"
             host: "{{ lookup('ini', 'cm_db_host section=clouderam file=cloudera.ini') }}"
             port: "3306"
             user: "scm"
             password: "{{ lookup('ini', 'cm_db_passwd section=clouderam file=cloudera.ini') }}"
             name: "scm"
         }
         ACTIVITYMONITOR {
             type: "mysql"
             host: "{{ lookup('ini', 'cm_db_host section=clouderam file=cloudera.ini') }}"
             port: "3306"
             user: "amon"
             password: "{{ lookup('ini', 'cm_db_passwd section=clouderam file=cloudera.ini') }}"
             name: "amon"
         }
         REPORTSMANAGER {
             type: "mysql"
             host: "{{ lookup('ini', 'cm_db_host section=clouderam file=cloudera.ini') }}"
             port: "3306"
             user: "rman"
             password: "{{ lookup('ini', 'cm_db_passwd section=clouderam file=cloudera.ini') }}"
             name: "rman"
         }
        NAVIGATOR {
             type: "mysql"
             host: "{{ lookup('ini', 'cm_db_host section=clouderam file=cloudera.ini') }}"
             port: "3306"
             user: "nav"
             password: "{{ lookup('ini', 'cm_db_passwd section=clouderam file=cloudera.ini') }}"
             name: "nav"
         }
         NAVIGATORMETASERVER {
             type: "mysql"
             host: "{{ lookup('ini', 'cm_db_host section=clouderam file=cloudera.ini') }}"
             port: "3306"
             user: "navms"
             password: "{{ lookup('ini', 'cm_db_passwd section=clouderam file=cloudera.ini') }}"
             name: "navms"
         }
    }

}
cluster {
    products {
        CDH: 5.12
        SPARK2: 2.2
    }
    parcelRepositories: ["http://archive.cloudera.com/cdh5/parcels/5.12.0/",
                       "http://archive.cloudera.com/spark2/parcels/2.2/"]
    services: [HDFS, ZOOKEEPER, YARN, SPARK_ON_YARN, SPARK2_ON_YARN, HBASE, HIVE]
    configs {
        # HDFS fencing should be set to true for HA configurations
        HDFS {
            dfs_ha_fencing_methods: "shell(true)"
            dfs_replication: "3"
            dfs_block_local_path_access_user: "hbase,mapred,spark"
        }
    }
    
    databases {
         HIVE {
             type: "mysql"
             host: "{{ lookup('ini', 'cm_db_host section=clouderam file=cloudera.ini') }}"
             port: 3306
             user: hive
             password: "{{ lookup('ini', 'cm_db_passwd section=clouderam file=cloudera.ini') }}"
             name: hive
         }
    }
    masters-1 {
        count: 2
        instance: ${instances.c44x} {
            tags {
                group: "{{ lookup('ini', 'app_name section=clouderam file=cloudera.ini') }}-Master"
            }
        }
        
        roles {
            # ZooKeeper uses majority quorum for r/w, configure odd number of servers.
            HDFS: [NAMENODE, FAILOVERCONTROLLER, JOURNALNODE]
            ZOOKEEPER: [SERVER]
            HIVE: [HIVESERVER2, HIVEMETASTORE]
            YARN: [RESOURCEMANAGER]
            SPARK_ON_YARN: [GATEWAY]
            SPARK2_ON_YARN: [GATEWAY]
            HBASE: [MASTER,HBASETHRIFTSERVER]
        }
        # NameNode nameservice, autofailover, and quorum journal name must be configured for high availability
        configs {
            HDFS {
                NAMENODE {
                    dfs_federation_namenode_nameservice: hanameservice
                    autofailover_enabled: true
                    dfs_namenode_quorum_journal_name: hanameservice
                }
            }
        }
    }
    masters-2 {
        count: 1
        instance: ${instances.c44x} {
            tags {
                group: "{{ lookup('ini', 'app_name section=clouderam file=cloudera.ini') }}-Master"
            }
        }
        roles {
            # ZooKeeper uses majority quorum for r/w, configure odd number of servers.
            HDFS: [JOURNALNODE] # HTTPFS role needed for HUE
            ZOOKEEPER: [SERVER]
            YARN: [JOBHISTORY]
            HBASE: [HBASETHRIFTSERVER] # HBASETHRIFTSERVER role needed for HUE
            SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
            SPARK2_ON_YARN: [SPARK2_YARN_HISTORY_SERVER]
        }
        
    }
    workers {
        count: "{{ lookup('ini', 'cm_worker_count section=clouderam file=cloudera.ini') }}"
        minCount: "{{ lookup('ini', 'cm_worker_min_count section=clouderam file=cloudera.ini') }}"
        instance: ${instances.c44x} {
            tags {
                group: "{{ lookup('ini', 'app_name section=clouderam file=cloudera.ini') }}-Worker"
            }
        }
        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
            HBASE: [REGIONSERVER]
        }
        configs {
        HBASE {
          REGIONSERVER {
            hbase_regionserver_java_heapsize: 4000000000
          }
        }
      }
    }
    gateways {
        count: "{{ lookup('ini', 'cm_gateway_count section=clouderam file=cloudera.ini') }}"
        instance: ${instances.t2l} {
            tags {
                group: "{{ lookup('ini', 'app_name section=clouderam file=cloudera.ini') }}-Gateway"
            }
        }
        roles {
            HBASE: [GATEWAY]
            HIVE: [GATEWAY]
            SPARK2_ON_YARN: [GATEWAY]
        }
    }
}
